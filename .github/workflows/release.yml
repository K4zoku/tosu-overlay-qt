name: Release

on:
  push:
    # tags: ['v*']
    branches: [ci-testing]
    paths:
      - ".github/workflows/release.yml"

concurrency:
  group: publish-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  aur:
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/k4zoku/tosu-overlay-build-ci:latest
    steps:
    - name: Setup SSH 🔑 
      run: |
        mkdir -p /github/home/.ssh
        printf "Host aur.archlinux.org\n  HostName aur.archlinux.org\n  User aur\n  IdentityFile /github/home/.ssh/aur\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null" > /github/home/.ssh/config
        printf "%s" "${{ secrets.SSH_PRIVATE_KEY }}" > /github/home/.ssh/aur
        chmod 644 /github/home/.ssh/config
        chmod 600 /github/home/.ssh/aur
        useradd -d /github/home github
        chown -R github:github /github/home
        su -p github
        ssh-keygen -l -f /github/home/.ssh/aur # check key
        ssh -v -T aur.archlinux.org help # test connection
    - name: Set up GPG key 🔐        
      run: |
        echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --passphrase-fd 0 --import <(echo "${{ secrets.GPG_KEY }}")
        gpg --batch --yes --command-fd 0 --edit-key "${{ vars.GPG_KEY_ID }}" trust <<< $'5\ny\n'
        git config --global user.signingkey "${{ vars.GPG_KEY_ID }}"
        git config --global commit.gpgsign true
    - name: Checkout 🛒
      uses: actions/checkout@v5
      with:
          fetch-depth: 0
    - name: Define variables 📐
      id: variables
      run: |
        git config --global --add safe.directory "${GITHUB_WORKSPACE}"
        echo "VERSION=$(git describe --tags)" >> "$GITHUB_OUTPUT"
        echo "HASH=$(git rev-parse $(git describe --tags))" >> "$GITHUB_OUTPUT"
    - name: Packaging 📦
      run: |
        chown -R github:github .
        su -p github 
        git clone ${{ vars.AUR_REPOSITORY }} AUR
        sed -i "s/^_tag=.*/_tag=${{ steps.variables.outputs.HASH }}/" AUR/PKGBUILD
        cd AUR
        makepkg -cfs 
        git clean -dfx 
        makepkg --printsrcinfo > .SRCINFO 
        git add .SRCINFO PKGBUILD
        git commit -S -m "Update version to ${{ steps.variables.outputs.VERSION }}"
        git diff
    - name: Publish to AUR 🚀
      run: |
        cd AUR
        ls -l
        echo git push here